class Enemy{
  int type = 0;//0 == spider, 1 == bat, 2 == wasp, 3 == spike, 4 == invincibility, 5 == stop lava
  float x;//invincibility 10, stop lava 10 seconds
  float y;
  float l;
  float r;
  float u;
  float d;
  int distance;
  float origpos;
  boolean movingout = true;
  Enemy(float xx, float yy, int ttype, int distancee){
    x = xx;
    y = yy;
    l = xx;
    u = yy;
    d = yy + 47;
    r = xx + 47;
    type = ttype;
    distance = distancee;
    if(type == 1){
      origpos = y;
    }else
      origpos = x;
  }
  void Show(){
    //fill(255,0,0);rect(x,y,47,47); //hitboxes
    switch(type){
     case 0://spider
       fill(0, 0, 0);rect(x + 33, y + 27, 3, 3);rect(x + 45, y + 30, 3, 3);rect(x + 45, y + 36, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 27, y + 21, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 9, y + 18, 3, 3);rect(x + 9, y + 21, 3, 3);rect(x + 6, y + 21, 3, 3);rect(x + 3, y + 27, 3, 3);rect(x + 3, y + 36, 3, 3);rect(x + 6, y + 39, 3, 3);rect(x + 12, y + 39, 3, 3);rect(x + 15, y + 39, 3, 3);rect(x + 18, y + 39, 3, 3);rect(x + 24, y + 39, 3, 3);rect(x + 27, y + 39, 3, 3);rect(x + 33, y + 39, 3, 3);rect(x + 6, y + 24, 3, 3);rect(x + 27, y + 18, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 12, y + 24, 3, 3);rect(x + 9, y + 24, 3, 3);rect(x + 9, y + 27, 3, 3);rect(x + 6, y + 27, 3, 3);rect(x + 12, y + 36, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 24, y + 36, 3, 3);rect(x + 33, y + 36, 3, 3);rect(x + 39, y + 36, 3, 3);rect(x + 42, y + 36, 3, 3);rect(x + 30, y + 27, 3, 3);rect(x + 27, y + 27, 3, 3);rect(x + 27, y + 24, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 18, y + 24, 3, 3);rect(x + 15, y + 24, 3, 3);rect(x + 15, y + 27, 3, 3);rect(x + 12, y + 27, 3, 3);rect(x + 15, y + 30, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 39, y + 33, 3, 3);rect(x + 18, y + 30, 3, 3);rect(x + 18, y + 27, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 24, y + 27, 3, 3);fill(255, 0, 0);rect(x + 21, y + 18, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 18, y + 18, 3, 3);fill(0, 0, 0);rect(x + 36, y + 27, 3, 3);fill(20, 20, 20);rect(x + 15, y + 36, 3, 3);rect(x + 9, y + 36, 3, 3);rect(x + 9, y + 39, 3, 3);rect(x + 9, y + 42, 3, 3);rect(x + 9, y + 45, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 21, y + 36, 3, 3);rect(x + 21, y + 39, 3, 3);rect(x + 21, y + 42, 3, 3);rect(x + 21, y + 45, 3, 3);rect(x + 6, y + 36, 3, 3);rect(x + 0, y + 36, 3, 3);rect(x + 0, y + 39, 3, 3);rect(x + 0, y + 42, 3, 3);rect(x + 0, y + 45, 3, 3);rect(x + 36, y + 36, 3, 3);rect(x + 36, y + 39, 3, 3);rect(x + 36, y + 42, 3, 3);rect(x + 36, y + 45, 3, 3);fill(0, 0, 0);rect(x + 30, y + 39, 3, 3);fill(20, 20, 20);rect(x + 30, y + 36, 3, 3);fill(15, 15, 15);rect(x + 3, y + 45, 3, 3);rect(x + 24, y + 42, 3, 3);rect(x + 24, y + 45, 3, 3);rect(x + 39, y + 42, 3, 3);rect(x + 39, y + 45, 3, 3);rect(x + 12, y + 42, 3, 3);rect(x + 12, y + 45, 3, 3);rect(x + 3, y + 39, 3, 3);rect(x + 3, y + 42, 3, 3);fill(20, 20, 20);rect(x + 24, y + 33, 3, 3);rect(x + 33, y + 33, 3, 3);fill(0, 0, 0);rect(x + 21, y + 33, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 27, y + 30, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 30, y + 30, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 36, y + 33, 3, 3);rect(x + 36, y + 30, 3, 3);rect(x + 39, y + 30, 3, 3);rect(x + 42, y + 30, 3, 3);fill(255, 0, 0);rect(x + 42, y + 33, 3, 3);fill(0, 0, 0);rect(x + 45, y + 33, 3, 3);rect(x + 39, y + 39, 3, 3);fill(255, 0, 0);rect(x + 12, y + 21, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 24, y + 21, 3, 3);fill(0, 0, 0);rect(x + 42, y + 39, 3, 3);rect(x + 45, y + 39, 3, 3);fill(20, 20, 20);rect(x + 3, y + 33, 3, 3);rect(x + 12, y + 33, 3, 3);fill(0, 0, 0);rect(x + 15, y + 33, 3, 3);rect(x + 12, y + 30, 3, 3);rect(x + 9, y + 33, 3, 3);rect(x + 9, y + 30, 3, 3);rect(x + 6, y + 33, 3, 3);rect(x + 6, y + 30, 3, 3);rect(x + 3, y + 30, 3, 3);
     break;
     case 1://bat
       fill(0, 0, 0);rect(x + 18, y + 0, 3, 3);rect(x + 18, y + 3, 3, 3);rect(x + 27, y + 0, 3, 3);rect(x + 27, y + 3, 3, 3);rect(x + 27, y + 6, 3, 3);rect(x + 27, y + 9, 3, 3);rect(x + 18, y + 6, 3, 3);rect(x + 18, y + 9, 3, 3);rect(x + 15, y + 3, 3, 3);rect(x + 15, y + 6, 3, 3);rect(x + 30, y + 3, 3, 3);rect(x + 30, y + 6, 3, 3);rect(x + 21, y + 6, 3, 3);rect(x + 24, y + 6, 3, 3);rect(x + 24, y + 9, 3, 3);rect(x + 21, y + 9, 3, 3);rect(x + 21, y + 12, 3, 3);rect(x + 24, y + 12, 3, 3);rect(x + 6, y + 15, 3, 3);rect(x + 3, y + 15, 3, 3);rect(x + 3, y + 6, 3, 3);rect(x + 3, y + 9, 3, 3);rect(x + 3, y + 12, 3, 3);rect(x + 6, y + 12, 3, 3);rect(x + 9, y + 12, 3, 3);rect(x + 9, y + 15, 3, 3);rect(x + 12, y + 15, 3, 3);rect(x + 15, y + 15, 3, 3);rect(x + 18, y + 15, 3, 3);rect(x + 21, y + 15, 3, 3);rect(x + 24, y + 15, 3, 3);rect(x + 27, y + 15, 3, 3);rect(x + 30, y + 15, 3, 3);rect(x + 36, y + 15, 3, 3);rect(x + 42, y + 6, 3, 3);rect(x + 39, y + 12, 3, 3);rect(x + 36, y + 12, 3, 3);rect(x + 3, y + 18, 3, 3);rect(x + 3, y + 21, 3, 3);rect(x + 3, y + 24, 3, 3);rect(x + 3, y + 27, 3, 3);rect(x + 3, y + 30, 3, 3);rect(x + 9, y + 33, 3, 3);rect(x + 12, y + 33, 3, 3);rect(x + 15, y + 33, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 21, y + 36, 3, 3);rect(x + 21, y + 39, 3, 3);rect(x + 24, y + 39, 3, 3);rect(x + 24, y + 36, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 33, y + 33, 3, 3);rect(x + 36, y + 33, 3, 3);rect(x + 36, y + 30, 3, 3);rect(x + 39, y + 30, 3, 3);rect(x + 42, y + 30, 3, 3);rect(x + 42, y + 27, 3, 3);rect(x + 42, y + 24, 3, 3);rect(x + 42, y + 21, 3, 3);rect(x + 42, y + 18, 3, 3);rect(x + 42, y + 9, 3, 3);rect(x + 42, y + 12, 3, 3);rect(x + 42, y + 15, 3, 3);rect(x + 39, y + 15, 3, 3);rect(x + 39, y + 18, 3, 3);rect(x + 39, y + 21, 3, 3);rect(x + 39, y + 27, 3, 3);rect(x + 39, y + 24, 3, 3);rect(x + 36, y + 24, 3, 3);rect(x + 36, y + 21, 3, 3);rect(x + 33, y + 21, 3, 3);rect(x + 33, y + 15, 3, 3);rect(x + 36, y + 18, 3, 3);rect(x + 33, y + 18, 3, 3);rect(x + 30, y + 18, 3, 3);rect(x + 21, y + 18, 3, 3);rect(x + 18, y + 18, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 9, y + 18, 3, 3);rect(x + 6, y + 18, 3, 3);rect(x + 6, y + 27, 3, 3);rect(x + 6, y + 30, 3, 3);rect(x + 9, y + 30, 3, 3);rect(x + 18, y + 30, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 21, y + 33, 3, 3);rect(x + 24, y + 33, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 36, y + 27, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 27, y + 30, 3, 3);rect(x + 30, y + 30, 3, 3);rect(x + 30, y + 27, 3, 3);rect(x + 33, y + 27, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 27, y + 18, 3, 3);rect(x + 27, y + 21, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 24, y + 21, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 12, y + 21, 3, 3);rect(x + 9, y + 21, 3, 3);rect(x + 6, y + 21, 3, 3);rect(x + 6, y + 24, 3, 3);rect(x + 9, y + 27, 3, 3);rect(x + 12, y + 27, 3, 3);rect(x + 12, y + 30, 3, 3);rect(x + 15, y + 30, 3, 3);rect(x + 15, y + 27, 3, 3);rect(x + 18, y + 27, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 24, y + 27, 3, 3);rect(x + 27, y + 27, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 27, y + 24, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 18, y + 24, 3, 3);rect(x + 15, y + 24, 3, 3);rect(x + 12, y + 24, 3, 3);rect(x + 9, y + 24, 3, 3);
     break;
     case 2://wasp
       fill(0, 0, 0);rect(x + 12, y + 6, 3, 3);rect(x + 9, y + 6, 3, 3);rect(x + 6, y + 6, 3, 3);rect(x + 3, y + 9, 3, 3);rect(x + 3, y + 12, 3, 3);rect(x + 6, y + 15, 3, 3);rect(x + 9, y + 15, 3, 3);rect(x + 15, y + 15, 3, 3);rect(x + 15, y + 9, 3, 3);rect(x + 12, y + 9, 3, 3);rect(x + 12, y + 12, 3, 3);rect(x + 12, y + 15, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 12, y + 21, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 21, y + 33, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 15, y + 36, 3, 3);rect(x + 12, y + 36, 3, 3);rect(x + 6, y + 36, 3, 3);rect(x + 6, y + 39, 3, 3);rect(x + 9, y + 39, 3, 3);rect(x + 9, y + 42, 3, 3);rect(x + 12, y + 42, 3, 3);rect(x + 15, y + 42, 3, 3);rect(x + 18, y + 42, 3, 3);rect(x + 21, y + 42, 3, 3);rect(x + 24, y + 42, 3, 3);rect(x + 27, y + 42, 3, 3);rect(x + 27, y + 39, 3, 3);rect(x + 30, y + 39, 3, 3);rect(x + 30, y + 36, 3, 3);rect(x + 33, y + 36, 3, 3);rect(x + 33, y + 33, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 36, y + 30, 3, 3);rect(x + 36, y + 27, 3, 3);rect(x + 36, y + 24, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 33, y + 18, 3, 3);rect(x + 30, y + 18, 3, 3);rect(x + 30, y + 15, 3, 3);rect(x + 27, y + 12, 3, 3);rect(x + 15, y + 12, 3, 3);rect(x + 18, y + 12, 3, 3);rect(x + 30, y + 12, 3, 3);rect(x + 30, y + 9, 3, 3);rect(x + 33, y + 9, 3, 3);rect(x + 36, y + 6, 3, 3);rect(x + 36, y + 3, 3, 3);rect(x + 39, y + 3, 3, 3);rect(x + 42, y + 3, 3, 3);rect(x + 42, y + 0, 3, 3);rect(x + 45, y + 3, 3, 3);rect(x + 45, y + 6, 3, 3);rect(x + 45, y + 9, 3, 3);rect(x + 45, y + 12, 3, 3);rect(x + 42, y + 12, 3, 3);rect(x + 42, y + 15, 3, 3);rect(x + 36, y + 18, 3, 3);rect(x + 36, y + 21, 3, 3);rect(x + 33, y + 21, 3, 3);rect(x + 33, y + 6, 3, 3);rect(x + 30, y + 6, 3, 3);rect(x + 30, y + 3, 3, 3);rect(x + 30, y + 0, 3, 3);rect(x + 27, y + 0, 3, 3);rect(x + 24, y + 0, 3, 3);rect(x + 21, y + 0, 3, 3);rect(x + 21, y + 3, 3, 3);rect(x + 21, y + 6, 3, 3);rect(x + 21, y + 9, 3, 3);rect(x + 21, y + 12, 3, 3);rect(x + 24, y + 9, 3, 3);rect(x + 24, y + 12, 3, 3);rect(x + 39, y + 15, 3, 3);rect(x + 39, y + 18, 3, 3);fill(255, 255, 0);rect(x + 12, y + 39, 3, 3);rect(x + 15, y + 39, 3, 3);rect(x + 24, y + 39, 3, 3);rect(x + 21, y + 36, 3, 3);rect(x + 24, y + 36, 3, 3);rect(x + 27, y + 30, 3, 3);rect(x + 27, y + 24, 3, 3);rect(x + 27, y + 21, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 30, y + 30, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 33, y + 27, 3, 3);rect(x + 21, y + 15, 3, 3);rect(x + 21, y + 18, 3, 3);rect(x + 18, y + 15, 3, 3);rect(x + 18, y + 18, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 27, y + 18, 3, 3);fill(0, 0, 0);rect(x + 27, y + 15, 3, 3);rect(x + 24, y + 15, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 24, y + 21, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 30, y + 27, 3, 3);rect(x + 27, y + 27, 3, 3);rect(x + 24, y + 27, 3, 3);rect(x + 24, y + 33, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 21, y + 39, 3, 3);rect(x + 18, y + 39, 3, 3);fill(0, 255, 255);rect(x + 27, y + 9, 3, 3);rect(x + 27, y + 3, 3, 3);rect(x + 24, y + 3, 3, 3);rect(x + 33, y + 12, 3, 3);rect(x + 33, y + 15, 3, 3);rect(x + 36, y + 15, 3, 3);rect(x + 39, y + 6, 3, 3);rect(x + 42, y + 6, 3, 3);rect(x + 42, y + 9, 3, 3);fill(255, 0, 0);rect(x + 6, y + 9, 3, 3);fill(0, 0, 0);rect(x + 9, y + 9, 3, 3);rect(x + 9, y + 12, 3, 3);rect(x + 6, y + 12, 3, 3);fill(0, 100, 255);rect(x + 36, y + 12, 3, 3);rect(x + 27, y + 6, 3, 3);rect(x + 24, y + 6, 3, 3);rect(x + 36, y + 9, 3, 3);rect(x + 39, y + 12, 3, 3);fill(0, 255, 255);rect(x + 39, y + 9, 3, 3);
     break;
     case 3://spike
       fill(255, 255, 255);rect(x + 42, y + 3, 3, 3);rect(x + 39, y + 6, 3, 3);rect(x + 36, y + 9, 3, 3);rect(x + 33, y + 9, 3, 3);rect(x + 33, y + 12, 3, 3);rect(x + 36, y + 12, 3, 3);rect(x + 30, y + 12, 3, 3);rect(x + 30, y + 15, 3, 3);rect(x + 33, y + 15, 3, 3);rect(x + 6, y + 6, 3, 3);rect(x + 9, y + 9, 3, 3);rect(x + 9, y + 12, 3, 3);rect(x + 12, y + 9, 3, 3);rect(x + 12, y + 12, 3, 3);rect(x + 12, y + 15, 3, 3);rect(x + 15, y + 15, 3, 3);rect(x + 15, y + 12, 3, 3);rect(x + 21, y + 3, 3, 3);rect(x + 21, y + 6, 3, 3);rect(x + 21, y + 9, 3, 3);rect(x + 21, y + 12, 3, 3);rect(x + 24, y + 9, 3, 3);rect(x + 24, y + 12, 3, 3);rect(x + 3, y + 24, 3, 3);rect(x + 6, y + 24, 3, 3);rect(x + 9, y + 21, 3, 3);rect(x + 9, y + 24, 3, 3);rect(x + 12, y + 24, 3, 3);rect(x + 12, y + 21, 3, 3);rect(x + 3, y + 42, 3, 3);rect(x + 6, y + 39, 3, 3);rect(x + 9, y + 33, 3, 3);rect(x + 9, y + 36, 3, 3);rect(x + 12, y + 36, 3, 3);rect(x + 12, y + 33, 3, 3);rect(x + 12, y + 30, 3, 3);rect(x + 15, y + 30, 3, 3);rect(x + 15, y + 33, 3, 3);rect(x + 24, y + 42, 3, 3);rect(x + 24, y + 39, 3, 3);rect(x + 21, y + 33, 3, 3);rect(x + 21, y + 36, 3, 3);rect(x + 24, y + 36, 3, 3);rect(x + 24, y + 33, 3, 3);rect(x + 42, y + 42, 3, 3);rect(x + 39, y + 39, 3, 3);rect(x + 36, y + 36, 3, 3);rect(x + 33, y + 36, 3, 3);rect(x + 33, y + 33, 3, 3);rect(x + 36, y + 33, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 30, y + 30, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 42, y + 21, 3, 3);rect(x + 39, y + 21, 3, 3);rect(x + 36, y + 21, 3, 3);rect(x + 33, y + 21, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 36, y + 24, 3, 3);rect(x + 27, y + 21, 3, 3);rect(x + 27, y + 24, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 24, y + 27, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 18, y + 24, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 21, y + 18, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 24, y + 21, 3, 3);fill(50, 50, 50);rect(x + 27, y + 27, 3, 3);rect(x + 27, y + 30, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 30, y + 36, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 27, y + 39, 3, 3);rect(x + 27, y + 42, 3, 3);rect(x + 21, y + 39, 3, 3);rect(x + 21, y + 42, 3, 3);rect(x + 24, y + 45, 3, 3);rect(x + 33, y + 39, 3, 3);rect(x + 36, y + 39, 3, 3);rect(x + 36, y + 42, 3, 3);rect(x + 39, y + 42, 3, 3);rect(x + 39, y + 45, 3, 3);rect(x + 42, y + 45, 3, 3);rect(x + 45, y + 45, 3, 3);rect(x + 45, y + 42, 3, 3);rect(x + 45, y + 39, 3, 3);rect(x + 42, y + 39, 3, 3);rect(x + 42, y + 36, 3, 3);rect(x + 39, y + 36, 3, 3);rect(x + 39, y + 33, 3, 3);rect(x + 36, y + 30, 3, 3);rect(x + 36, y + 27, 3, 3);rect(x + 33, y + 27, 3, 3);rect(x + 30, y + 27, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 18, y + 30, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 15, y + 36, 3, 3);rect(x + 12, y + 39, 3, 3);rect(x + 9, y + 39, 3, 3);rect(x + 9, y + 42, 3, 3);rect(x + 6, y + 42, 3, 3);rect(x + 6, y + 45, 3, 3);rect(x + 3, y + 45, 3, 3);rect(x + 0, y + 45, 3, 3);rect(x + 0, y + 42, 3, 3);rect(x + 0, y + 39, 3, 3);rect(x + 3, y + 39, 3, 3);rect(x + 3, y + 36, 3, 3);rect(x + 6, y + 36, 3, 3);rect(x + 6, y + 33, 3, 3);rect(x + 18, y + 27, 3, 3);rect(x + 15, y + 27, 3, 3);rect(x + 12, y + 27, 3, 3);rect(x + 6, y + 27, 3, 3);rect(x + 3, y + 27, 3, 3);rect(x + 9, y + 30, 3, 3);rect(x + 9, y + 27, 3, 3);rect(x + 0, y + 24, 3, 3);rect(x + 3, y + 21, 3, 3);rect(x + 6, y + 21, 3, 3);rect(x + 9, y + 15, 3, 3);rect(x + 9, y + 18, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 18, y + 18, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 15, y + 24, 3, 3);rect(x + 21, y + 15, 3, 3);rect(x + 24, y + 15, 3, 3);rect(x + 27, y + 15, 3, 3);rect(x + 27, y + 18, 3, 3);rect(x + 30, y + 18, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 33, y + 18, 3, 3);rect(x + 36, y + 18, 3, 3);rect(x + 39, y + 18, 3, 3);rect(x + 42, y + 18, 3, 3);rect(x + 45, y + 21, 3, 3);rect(x + 42, y + 24, 3, 3);rect(x + 39, y + 24, 3, 3);rect(x + 36, y + 15, 3, 3);rect(x + 39, y + 12, 3, 3);rect(x + 39, y + 9, 3, 3);rect(x + 42, y + 9, 3, 3);rect(x + 42, y + 6, 3, 3);rect(x + 45, y + 6, 3, 3);rect(x + 45, y + 3, 3, 3);rect(x + 45, y + 0, 3, 3);rect(x + 42, y + 0, 3, 3);rect(x + 39, y + 0, 3, 3);rect(x + 39, y + 3, 3, 3);rect(x + 36, y + 3, 3, 3);rect(x + 36, y + 6, 3, 3);rect(x + 33, y + 6, 3, 3);rect(x + 30, y + 9, 3, 3);rect(x + 27, y + 9, 3, 3);rect(x + 27, y + 12, 3, 3);rect(x + 24, y + 6, 3, 3);rect(x + 24, y + 3, 3, 3);rect(x + 21, y + 0, 3, 3);rect(x + 18, y + 3, 3, 3);rect(x + 18, y + 6, 3, 3);rect(x + 18, y + 9, 3, 3);rect(x + 18, y + 12, 3, 3);rect(x + 18, y + 15, 3, 3);rect(x + 15, y + 9, 3, 3);rect(x + 12, y + 6, 3, 3);rect(x + 9, y + 6, 3, 3);rect(x + 9, y + 3, 3, 3);rect(x + 6, y + 3, 3, 3);rect(x + 6, y + 0, 3, 3);rect(x + 0, y + 0, 3, 3);rect(x + 3, y + 0, 3, 3);rect(x + 0, y + 3, 3, 3);rect(x + 0, y + 6, 3, 3);rect(x + 3, y + 6, 3, 3);rect(x + 3, y + 9, 3, 3);rect(x + 6, y + 9, 3, 3);rect(x + 6, y + 12, 3, 3);fill(255, 255, 255);rect(x + 3, y + 3, 3, 3);
     break;
     case 4://invincibility vial
       fill(110, 255, 255);rect(x + 18, y + 9, 3, 3);rect(x + 27, y + 9, 3, 3);rect(x + 18, y + 12, 3, 3);rect(x + 15, y + 15, 3, 3);rect(x + 12, y + 15, 3, 3);rect(x + 9, y + 15, 3, 3);rect(x + 6, y + 15, 3, 3);rect(x + 3, y + 15, 3, 3);rect(x + 6, y + 18, 3, 3);rect(x + 9, y + 21, 3, 3);rect(x + 12, y + 24, 3, 3);rect(x + 15, y + 27, 3, 3);rect(x + 12, y + 30, 3, 3);rect(x + 9, y + 36, 3, 3);rect(x + 9, y + 42, 3, 3);rect(x + 9, y + 39, 3, 3);rect(x + 12, y + 39, 3, 3);rect(x + 15, y + 39, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 30, y + 39, 3, 3);rect(x + 33, y + 39, 3, 3);rect(x + 36, y + 42, 3, 3);rect(x + 36, y + 39, 3, 3);rect(x + 36, y + 36, 3, 3);rect(x + 33, y + 33, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 27, y + 12, 3, 3);rect(x + 30, y + 15, 3, 3);rect(x + 33, y + 15, 3, 3);rect(x + 36, y + 15, 3, 3);rect(x + 42, y + 15, 3, 3);rect(x + 39, y + 15, 3, 3);rect(x + 39, y + 18, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 30, y + 27, 3, 3);fill(0, 0, 255);rect(x + 12, y + 36, 3, 3);rect(x + 15, y + 36, 3, 3);rect(x + 15, y + 33, 3, 3);rect(x + 15, y + 30, 3, 3);rect(x + 18, y + 30, 3, 3);rect(x + 18, y + 27, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 24, y + 27, 3, 3);rect(x + 27, y + 27, 3, 3);rect(x + 27, y + 30, 3, 3);rect(x + 30, y + 30, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 30, y + 36, 3, 3);rect(x + 33, y + 36, 3, 3);rect(x + 27, y + 24, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 33, y + 18, 3, 3);rect(x + 36, y + 18, 3, 3);rect(x + 33, y + 21, 3, 3);rect(x + 21, y + 15, 3, 3);rect(x + 18, y + 15, 3, 3);rect(x + 18, y + 18, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 9, y + 18, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 12, y + 21, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 15, y + 24, 3, 3);rect(x + 18, y + 24, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 24, y + 21, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 21, y + 18, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 21, y + 9, 3, 3);rect(x + 21, y + 12, 3, 3);rect(x + 24, y + 12, 3, 3);fill(110, 255, 255);rect(x + 36, y + 21, 3, 3);rect(x + 12, y + 33, 3, 3);fill(123, 87, 35);rect(x + 24, y + 3, 3, 3);rect(x + 15, y + 3, 3, 3);rect(x + 21, y + 3, 3, 3);rect(x + 18, y + 3, 3, 3);rect(x + 18, y + 0, 3, 3);rect(x + 21, y + 0, 3, 3);rect(x + 24, y + 0, 3, 3);rect(x + 27, y + 0, 3, 3);rect(x + 27, y + 3, 3, 3);rect(x + 30, y + 3, 3, 3);fill(0, 0, 255);rect(x + 30, y + 18, 3, 3);rect(x + 24, y + 9, 3, 3);fill(123, 87, 35);rect(x + 21, y + 6, 3, 3);rect(x + 24, y + 6, 3, 3);fill(0, 0, 255);rect(x + 24, y + 15, 3, 3);rect(x + 27, y + 15, 3, 3);rect(x + 27, y + 18, 3, 3);rect(x + 27, y + 21, 3, 3);
     break;
     case 5://lava stopper vial
       fill(110, 255, 255);rect(x + 18, y + 18, 3, 3);rect(x + 27, y + 18, 3, 3);fill(255, 0, 0);rect(x + 27, y + 30, 3, 3);rect(x + 24, y + 30, 3, 3);rect(x + 21, y + 30, 3, 3);rect(x + 27, y + 27, 3, 3);rect(x + 24, y + 27, 3, 3);rect(x + 18, y + 24, 3, 3);rect(x + 24, y + 24, 3, 3);rect(x + 21, y + 24, 3, 3);rect(x + 21, y + 27, 3, 3);rect(x + 18, y + 27, 3, 3);rect(x + 15, y + 27, 3, 3);rect(x + 15, y + 30, 3, 3);rect(x + 12, y + 30, 3, 3);rect(x + 12, y + 33, 3, 3);rect(x + 15, y + 33, 3, 3);rect(x + 27, y + 36, 3, 3);rect(x + 30, y + 33, 3, 3);rect(x + 27, y + 33, 3, 3);rect(x + 24, y + 33, 3, 3);rect(x + 24, y + 36, 3, 3);rect(x + 18, y + 36, 3, 3);rect(x + 21, y + 33, 3, 3);rect(x + 21, y + 36, 3, 3);rect(x + 18, y + 33, 3, 3);rect(x + 18, y + 30, 3, 3);fill(110, 255, 255);rect(x + 18, y + 3, 3, 3);rect(x + 21, y + 3, 3, 3);rect(x + 24, y + 6, 3, 3);rect(x + 24, y + 3, 3, 3);rect(x + 27, y + 3, 3, 3);rect(x + 15, y + 3, 3, 3);rect(x + 30, y + 3, 3, 3);rect(x + 18, y + 6, 3, 3);rect(x + 18, y + 9, 3, 3);rect(x + 18, y + 12, 3, 3);rect(x + 18, y + 15, 3, 3);rect(x + 27, y + 6, 3, 3);rect(x + 27, y + 9, 3, 3);rect(x + 27, y + 12, 3, 3);rect(x + 27, y + 15, 3, 3);rect(x + 15, y + 18, 3, 3);rect(x + 12, y + 18, 3, 3);rect(x + 12, y + 21, 3, 3);rect(x + 9, y + 21, 3, 3);rect(x + 9, y + 24, 3, 3);rect(x + 6, y + 24, 3, 3);rect(x + 6, y + 27, 3, 3);rect(x + 9, y + 39, 3, 3);rect(x + 12, y + 39, 3, 3);rect(x + 12, y + 42, 3, 3);rect(x + 15, y + 42, 3, 3);rect(x + 18, y + 42, 3, 3);rect(x + 21, y + 42, 3, 3);rect(x + 24, y + 42, 3, 3);rect(x + 27, y + 42, 3, 3);rect(x + 30, y + 42, 3, 3);rect(x + 39, y + 36, 3, 3);rect(x + 39, y + 33, 3, 3);rect(x + 39, y + 30, 3, 3);rect(x + 39, y + 27, 3, 3);rect(x + 39, y + 24, 3, 3);rect(x + 36, y + 24, 3, 3);rect(x + 36, y + 21, 3, 3);rect(x + 33, y + 21, 3, 3);rect(x + 33, y + 18, 3, 3);rect(x + 30, y + 18, 3, 3);rect(x + 21, y + 6, 3, 3);fill(255, 0, 0);rect(x + 21, y + 12, 3, 3);rect(x + 21, y + 15, 3, 3);rect(x + 21, y + 18, 3, 3);rect(x + 21, y + 21, 3, 3);rect(x + 24, y + 21, 3, 3);rect(x + 24, y + 18, 3, 3);rect(x + 24, y + 15, 3, 3);rect(x + 24, y + 12, 3, 3);rect(x + 21, y + 9, 3, 3);rect(x + 24, y + 9, 3, 3);rect(x + 18, y + 21, 3, 3);rect(x + 15, y + 21, 3, 3);rect(x + 15, y + 24, 3, 3);rect(x + 12, y + 24, 3, 3);rect(x + 12, y + 27, 3, 3);rect(x + 9, y + 27, 3, 3);rect(x + 9, y + 30, 3, 3);rect(x + 9, y + 33, 3, 3);rect(x + 12, y + 36, 3, 3);rect(x + 15, y + 36, 3, 3);rect(x + 15, y + 39, 3, 3);rect(x + 18, y + 39, 3, 3);rect(x + 21, y + 39, 3, 3);rect(x + 24, y + 39, 3, 3);rect(x + 27, y + 39, 3, 3);rect(x + 30, y + 39, 3, 3);rect(x + 30, y + 36, 3, 3);rect(x + 33, y + 33, 3, 3);rect(x + 36, y + 33, 3, 3);rect(x + 36, y + 30, 3, 3);rect(x + 36, y + 27, 3, 3);rect(x + 33, y + 24, 3, 3);rect(x + 30, y + 21, 3, 3);rect(x + 27, y + 21, 3, 3);rect(x + 33, y + 36, 3, 3);fill(110, 255, 255);rect(x + 9, y + 36, 3, 3);rect(x + 6, y + 36, 3, 3);rect(x + 6, y + 33, 3, 3);rect(x + 6, y + 30, 3, 3);rect(x + 33, y + 39, 3, 3);rect(x + 33, y + 42, 3, 3);rect(x + 36, y + 36, 3, 3);rect(x + 36, y + 39, 3, 3);fill(255, 255, 255);rect(x + 27, y + 24, 3, 3);rect(x + 30, y + 24, 3, 3);rect(x + 33, y + 27, 3, 3);rect(x + 30, y + 27, 3, 3);rect(x + 33, y + 30, 3, 3);rect(x + 30, y + 30, 3, 3);
     break;
    }
  }
  void Move(){
    if(type == 1){//moving y
      if(y >= origpos + distance)
        movingout = false;
      else if(y <= origpos)
        movingout = true;
      if(movingout){
        y += 1;
        u += 1;
        d += 1;
      }else{
        y -= 1;
        u -= 1;
        d -= 1;
      }
    }else if(type == 0 || type == 2){//moving x
      if(x >= origpos + distance)
        movingout = false;
      else if(x <= origpos)
        movingout = true;
      if(movingout){
        x += 1;
        l += 1;
        r += 1;
      }else{
        x -= 1;
        l -= 1;
        r -= 1;
      }
    }
  }
}
